#include <bits/stdc++.h>
using namespace std;

struct TreeNode{
    
    int val;
    TreeNode *left, *right;
    
    TreeNode(int x){
        val=x;
        left=NULL;
        right=NULL;
    }
    
};

void left(TreeNode *root, vector<int> &v){
    while(root->left and root->right){
        if(root->left){
            v.push_back(root->val);
            root=root->left;
        }
        else{
            v.push_back(root->val);
            root=root->right;
        }
    }
}

void right(TreeNode *root, vector<int> &v){
    stack<int> stk;
    while(root->left and root->right){
        stk.push(root->val);
        if(root->right){
            root=root->right;
        }
        else{
            root=root->left;
        }
    }
    
    while(stk.size()){
        v.push_back(stk.top());
        stk.pop();
    }
}

void inorder(TreeNode *root, vector<int> &v){
    
    if(!root) return;
    
    inorder(root->left,v);
    if(!(root->left) and !(root->right)) v.push_back(root->val);
    inorder(root->right,v);
    
}

void boundaryACW(TreeNode *root, vector<int> &v){
    v.push_back(root->val);
    left(root->left,v);
    inorder(root,v);
    right(root->right,v);
}

int main() {
    
    TreeNode *root = new TreeNode(1);
    root->left= new TreeNode(2);
    root->right= new TreeNode(3);
    root->left->left = new TreeNode(4);
    root->left->right = new TreeNode(5);
    root->right->left = new TreeNode(6);
    
    vector<int> v;
    
    boundaryACW(root,v);
    
    for(auto a: v){
        cout<<a<<" ";
    }
    cout<<endl;
    
    return 0;
}
